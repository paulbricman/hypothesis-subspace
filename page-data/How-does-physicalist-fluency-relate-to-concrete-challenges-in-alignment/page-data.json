{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/How-does-physicalist-fluency-relate-to-concrete-challenges-in-alignment","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How does physicalist fluency relate to concrete challenges in alignment?\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"how-does-physicalist-fluency-relate-to-concrete-challenges-in-alignment\"\n  }, \"How does physicalist fluency relate to concrete challenges in alignment?\"), mdx(\"p\", null, \"Similar to abstraction inductors, physicalist fluency provides a different path to promoting shared abstractions between human and AI, which can then be made use of as part of the objective function. However, it has the added benefit of providing an arbitrary limit on the richness of internal representations in relation to those of one human. In this, it addresses inner alignment.\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Physicalist Fluency\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"physicalist-fluency\"\n  }, \"Physicalist Fluency\"), mdx(\"p\", null, \"What if we try to go as close as possible to human values and bypass language? First, learn a neural interlingua by training an auxiliary model to translate across all neuroimaging modalities currently available and forcing a compact bottleneck layer. Second, condition the whole internal state of the main model to be translatable to and from the neural interlingua. This should generally ensure that human representations and human representations alone are employed by the model in its internal thought process, by constraining it to what human brains are fluent in. Third, as a slider of capability, gradually shift towards relaxing the translatability constrain by applying it to model shards only, rather than holistically. This is analogous to a team of developers working on a codebase, where each one is only responsible for a chunk of it. The codebase is still represented in human brains, but no single brain represents it.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/How-does-physicalist-fluency-relate-to-concrete-challenges-in-alignment\",\n    \"title\": \"How-does-physicalist-fluency-relate-to-concrete-challenges-in-alignment\"\n  }, \"[[How-does-physicalist-fluency-relate-to-concrete-challenges-in-alignment]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"2f01975f-69e9-5e81-9d6d-451ac0be6937","fields":{"slug":"/Physicalist-Fluency","title":"Physicalist Fluency"}}}]},"fields":{"slug":"/How-does-physicalist-fluency-relate-to-concrete-challenges-in-alignment","title":"How does physicalist fluency relate to concrete challenges in alignment?"}}},"pageContext":{"id":"8cfcaea4-12ad-5f88-831a-863caa84aacb"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}