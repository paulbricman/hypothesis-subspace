{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/how-do-differentiable-cosmogonies-relate-to-microscope-ai","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How do differentiable cosmogonies relate to Microscope AI?\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"how-do-differentiable-cosmogonies-relate-to-microscope-ai\"\n  }, \"How do differentiable cosmogonies relate to Microscope AI?\"), mdx(\"p\", null, \"Similarities:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Both avoid deploying agentic systems.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Both rely on gaining knowledge from an ML model or its sandboxed output.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They both likely fail to account for Meta deploying unaligned AGI six months later.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The interpretability aspect of unfamiliar structures (e.g. ML model weights, alien replicators) appears to be the most difficult step of the proposals.\")), mdx(\"p\", null, \"Differences:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Differentiable cosmogonies rely on gleaning information from the simulation implemented by an ML model, while Microscope AI relies on gleaning information from the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"weights\"), \" of the ML model.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Microscope AI relies on training the ML model on data about our world, while differentiable cosmogonies as a paradigm rely on keeping the ML model as isolated as possible from information about our world.\")));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Differentiable Cosmogonies\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"differentiable-cosmogonies\"\n  }, \"Differentiable Cosmogonies\"), mdx(\"p\", null, \"Training a model on data about the world (e.g. Wikipedia, books, articles, papers, etc.) makes it difficult to box, as it's likely to exploit loopholes in the world (e.g. from physics to sociology) based on its evidence. Given this, we could build a one-way model-to-human channel by tasking the model with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"learning a physics\"), \" which reliably causes lifelike structures to emerge from noise, before us gleaning insights from the resulting structures in a Voyager-pretending-Earth-is-alien sort of way. Life could be operationalized as entropy-fighting across space (e.g. forming unlikely chunks of matter) and time (e.g. changing in unlikely ways from moment to moment), while the physics to be learned could be modeled by a transformer mapping particle-tokens from one timestep to the next. Local-only interactions could help fight the quadratic attention costs, while particle-tokens could have slots for velocity, momentum, and chemical properties, depending on the targeted level of abstraction.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/how-do-differentiable-cosmogonies-relate-to-concrete-challenges-in-alignment\",\n    \"title\": \"how-do-differentiable-cosmogonies-relate-to-concrete-challenges-in-alignment\"\n  }, \"[[how-do-differentiable-cosmogonies-relate-to-concrete-challenges-in-alignment]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/how-would-a-training-story-look-like-for-differentiable-colonies\",\n    \"title\": \"how-would-a-training-story-look-like-for-differentiable-colonies\"\n  }, \"[[how-would-a-training-story-look-like-for-differentiable-colonies]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/how-do-differentiable-cosmogonies-relate-to-microscope-ai\",\n    \"title\": \"how-do-differentiable-cosmogonies-relate-to-microscope-ai\"\n  }, \"[[how-do-differentiable-cosmogonies-relate-to-microscope-ai]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"2c3721b1-5de3-5ea1-b694-4055ec9c8136","fields":{"slug":"/differentiable-cosmogonies","title":"Differentiable Cosmogonies"}}}]},"fields":{"slug":"/how-do-differentiable-cosmogonies-relate-to-microscope-ai","title":"How do differentiable cosmogonies relate to Microscope AI?"}}},"pageContext":{"id":"18fc02ec-441a-50eb-8510-d65c7b27f8bf"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}