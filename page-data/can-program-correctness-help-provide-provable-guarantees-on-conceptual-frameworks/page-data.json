{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/can-program-correctness-help-provide-provable-guarantees-on-conceptual-frameworks","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Can program correctness help provide provable guarantees on conceptual frameworks?\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"can-program-correctness-help-provide-provable-guarantees-on-conceptual-frameworks\"\n  }, \"Can program correctness help provide provable guarantees on conceptual frameworks?\"), mdx(\"p\", null, \"It might be, though the grounding of concept operators in mathematical formalism might be essential for that. For instance, the boolean and linear algebra underpinnings of boolean and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://paulbricman.com/thoughtware/semantica\"\n  }, \"Semantica-like\"), \" ops might enable proofs on related properties of the concept program as a whole, or at least upper-bounds on error to be matched against thresholds based on given standards of caution.\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Concept Programming\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"concept-programming\"\n  }, \"Concept Programming\"), mdx(\"p\", null, \"This frame is an iteration of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/abstraction-inductors\",\n    \"title\": \"abstraction-inductors\"\n  }, \"[[abstraction-inductors]]\"), \", yet it's sufficiently different from the previous version to warrant a new node. Concept programming is the process of systematically modifying the conceptual framework internalized by an ML model. To go with the analogy, concept programming languages generally include the following components:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"variables / symbols\"), \": The variable \\\"fruit\\\" is a container for the concept of fruit.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"values / concepts\"), \": The concept of fruit is contained in the \\\"fruit\\\" variable.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"assignment\"), \": Assigning a concept to a symbol is identified with heavily tweaking the ML model's ontology to reflect that.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"initialization\"), \": Initializing a new symbol is identified with creating a tabula rasa association-free entity in the model's ontology (e.g. a fresh new token).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"concept operators\"), \": Taking the conjunction of \\\"Apple\\\" and \\\"Microsoft\\\" might yield a concept of big tech company. Boolean and \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://paulbricman.com/thoughtware/semantica\"\n  }, \"Semantica-like\"), \" ops are low-hanging fruit here.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"flow operators\"), \": Basic if/for/while/switch/... structures for guiding the concept program.\")), mdx(\"p\", null, \"The application idea is that using a concept program which incorporates multiple of those elements, the model's internal ontology could be systematically tweaked towards useful outcomes. For instance, this might mean forming suitable abstractions of human values, or discouraging abstractions which are at odds with those.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/how-does-concept-programming-relate-to-the-natural-abstraction-hypothesis\",\n    \"title\": \"how-does-concept-programming-relate-to-the-natural-abstraction-hypothesis\"\n  }, \"[[how-does-concept-programming-relate-to-the-natural-abstraction-hypothesis]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/can-program-correctness-help-provide-provable-guarantees-on-conceptual-frameworks\",\n    \"title\": \"can-program-correctness-help-provide-provable-guarantees-on-conceptual-frameworks\"\n  }, \"[[can-program-correctness-help-provide-provable-guarantees-on-conceptual-frameworks]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/what-if-variables-in-concept-programming-can-hold-more-complex-structures\",\n    \"title\": \"what-if-variables-in-concept-programming-can-hold-more-complex-structures\"\n  }, \"[[what-if-variables-in-concept-programming-can-hold-more-complex-structures]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"c0f9eba5-fb3f-5a6a-8ef3-df41c5e1a4f9","fields":{"slug":"/concept-programming","title":"Concept Programming"}}}]},"fields":{"slug":"/can-program-correctness-help-provide-provable-guarantees-on-conceptual-frameworks","title":"Can program correctness help provide provable guarantees on conceptual frameworks?"}}},"pageContext":{"id":"5719da57-738a-5955-9c0d-d9f3672d0533"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}