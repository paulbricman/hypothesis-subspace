{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/what-holds-and-what-breaks-in-the-parametric-ecologies-analogy","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"What holds and what breaks in the parametric ecologies analogy?\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"what-holds-and-what-breaks-in-the-parametric-ecologies-analogy\"\n  }, \"What holds and what breaks in the parametric ecologies analogy?\"), mdx(\"p\", null, \"Holds:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Both ecologies and ML models have inputs and outputs. The former in the form of energy and metabolic pathways, the latter in the form of data.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Both ecologies and ML models exhibit exaptation. In ecologies, this translates to dynamics developed in a niche being reused in a different niche. In ML models, this translates to transfer learning and pre-training/fine-tuning practices.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Both ecologies and ML models exhibit gradualism. In ecologies, you wouldn't get complexity like the human eye if simpler eyes wouldn't have helped a bit at least in the past. In ML models, you wouldn't get certain behaviors if previous changes towards them wouldn't have led to improvements.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Both ecologies and ML models grow resilient from redundancy. In ecology, this translates to multiple energy pathways making species resilient against one food source disappearing. In ML models, this translates to Dropout/DropConnect-like regularizers encouraging what I'd call \\\"internal ensembles\\\" reaching a sensible consensus despite one pathway going wacky.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Both ecologies and ML models exhibit covergent dynamics. In ecology, this translates to convergent evolution (e.g. flight having been rediscovered multiple times on Earth because it's useful in certain niches). In ML models, this translates to instrumental convergence and something akin to natural abstractions (e.g. varied models trained on face recognition form anatomical abstractions independently).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Both ecologies and ML models lend themselves to co-evolution loops. In ecology, this translates to both cooperative (e.g. symbionts growing interdependent) and competitive (e.g. leopard and antelopes both getting faster). In ML models, this translates to training setups involving multiple models (e.g. generator and discriminator co-evolving in GANs).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Both ecologies and ML models lend themselves to optimization pressure. In ecology, this translates to evolutionary pressure to adapt to available niches. In ML models, this translates to optimization pressure exercised via gradient descent.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Both ecologies and ML models lack intelligent design. In ecology, this translates to Darwinism. In ML models, this translated to ML as opposed to rule-based/symbolic/non-ML methods.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Both ecologies and ML models can shape their inputs. In ecologies, this translates to biotic influences over abiotic stuffs. In ML models, this translates to learned embeddings which accumulate gradients despite being at the bottom of the \\\"trophic chain\\\" and not serving any other role other than to be consumed.\")), mdx(\"p\", null, \"Partially holds:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Many ML models are optimized to fit fixed computational niches. In contrast, ecologies subtly influence each other over time, and hence drift away from their initial niches. However, some ML training paradigms exhibit non-fixed niches. Any regime involving multiple models is one such case (as they're mutually defining each other's niche). Additionally, individual models trained to reverse corruptions (e.g. denoising, diffusion, language modeling, masked language modeling, etc.) are occasionally re-defining their own niche by defining the stable shape of this external object (e.g. cascades, self-distillation).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It's unclear what the individual members of the trophic chain are. Individual neurons? Individual layers? Individual blocks (e.g. transformer encoder block containing multiple simpler layers)? Multiple choices are compatible with the analogy, especially if individuals are not internally influencing or feeding on themselves.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It's not perfectly clear to me how reinforcement learning would be framed in this input-output niche setting. Perhaps environment states are inputs, actions are outputs, but what about reward? This ecology isn't tasked with fitting a particular computational niche, because we don't know how that would look like. We're guiding by fitness directly, sort of?\")));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Parametric Ecologies\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"parametric-ecologies\"\n  }, \"Parametric Ecologies\"), mdx(\"p\", null, \"Life is arguably the primordial world-optimizer, with biotic factors being known to have caused \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.sciencedirect.com/science/article/pii/S0960982215010908\"\n  }, \"major shifts\"), \" in the abiotic world to suit their needs: oxygen-rich atmosphere, fertile soils, etc. We find ourselves in a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/The_Blind_Watchmaker\"\n  }, \"\\\"blind watchmaker\\\"\"), \" position where we can bring into existence systems beyond our comprehension by merely defining a computational niche and applying optimization pressure. One way of modeling niche-bound ecologies is in term of their inputs and outputs: what kinds of energy and matter they consume in relation to what they offer for others to consume. If framing ML models as ecologies adapting to an (often unnaturally fixed) computational niche, all sorts of neat parallels arise: transfer learning as exaptation, instrumental convergence as convergent evolution, regularizers as stressors enforcing resilience, gradualism, meta-learning as internal selection, etc. From here, we could build on ideas from ecosystem engineering and remnants of cybernetics (which, temptingly, means \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"steersman\"), \") to explore the vocabulary of stable \\\"arrangements\\\" of ecologies, similar to the clever setups involved in backtranslation, diffusion, or adversarial training.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/how-do-parametric-ecologies-relate-to-concrete-challenges-in-alignment\",\n    \"title\": \"how-do-parametric-ecologies-relate-to-concrete-challenges-in-alignment\"\n  }, \"[[how-do-parametric-ecologies-relate-to-concrete-challenges-in-alignment]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/what-holds-and-what-breaks-in-the-parametric-ecologies-analogy\",\n    \"title\": \"what-holds-and-what-breaks-in-the-parametric-ecologies-analogy\"\n  }, \"[[what-holds-and-what-breaks-in-the-parametric-ecologies-analogy]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/what-low-hanging-safety-mechanisms-are-parametric-ecologies-hinting-at\",\n    \"title\": \"what-low-hanging-safety-mechanisms-are-parametric-ecologies-hinting-at\"\n  }, \"[[what-low-hanging-safety-mechanisms-are-parametric-ecologies-hinting-at]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"c2873cfd-4c2b-5e67-9123-9fbcd93e4de4","fields":{"slug":"/parametric-ecologies","title":"Parametric Ecologies"}}}]},"fields":{"slug":"/what-holds-and-what-breaks-in-the-parametric-ecologies-analogy","title":"What holds and what breaks in the parametric ecologies analogy?"}}},"pageContext":{"id":"19b18345-02fe-5652-a013-7688dc8f14ff"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}