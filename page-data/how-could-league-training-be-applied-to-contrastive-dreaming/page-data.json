{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/how-could-league-training-be-applied-to-contrastive-dreaming","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How could league training be applied to contrastive dreaming?\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"how-could-league-training-be-applied-to-contrastive-dreaming\"\n  }, \"How could league training be applied to contrastive dreaming?\"), mdx(\"p\", null, \"Actually, contrastive dreaming (CD), league training (LT), and adversarial training regimes (GAN) might all three work together really neatly. I see three broad major setups:\"), mdx(\"h2\", {\n    \"id\": \"cd--lt\"\n  }, \"CD + LT\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Train evaluator E1 to penalize its contrastive dreams D1 while correlating with human ratings.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Train evaluator E2 to penalize D1 and D2 while correlating with human ratings.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"...\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"E \\u2192 figure its systematic blindspots.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \\u2192 N/A\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"E > A\")), mdx(\"h2\", {\n    \"id\": \"gan--lt\"\n  }, \"GAN + LT\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Train evaluator to discriminate among human plans / the agent A1's artificial plans.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Train evaluator to discriminate among human plans / A1's plans / A2's plans.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"...\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"E \\u2192 figure agent's systematic tricks.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \\u2192 figure evaluator's systematic blindspots.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"E = A\")), mdx(\"h2\", {\n    \"id\": \"cd--gan--lt\"\n  }, \"CD + GAN + LT\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Train evaluator E1 to discriminate among human plans / A1's plans / its contrastive dreams D1.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Train evaluator E2 to discriminate among human plans / A1's plans / D1 / A2's plans, D2.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"...\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"E \\u2192 figure agent's systematic tricks and its own blindspots.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \\u2192 figure evaluator's systematic blindspots.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"E > A\")), mdx(\"p\", null, \"I have shuffled plans as evaluation targets with world states somewhat. World states most intuitively go with regression targets, while plans go with classification ones. However, that's not mandatory. You can assign humanness to plans to frame it as a regression problem, or classify world states as appropriate/inappropriate, for instance.\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Contrastive Dreaming\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"contrastive-dreaming\"\n  }, \"Contrastive Dreaming\"), mdx(\"p\", null, \"Dreaming has been argued to act as a source of negative examples (i.e. how the world isn't like), in order to complement the positive examples of wakefulness. In \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://en.wikipedia.org/wiki/DeepDream\"\n  }, \"DeepDream art\"), \", people force AIs to project internal models of their world onto their world (e.g. by mutating input images into extreme dogginess). While those hallucinations generally point in the right direction, they always violate reality (e.g. ultra-doggified images fail to depict how dogs really show up in the world \\u2014 you can easily tell that the image is DeepDreamed). That makes for a perfect source of negative examples to complement robust adversarial training, because dreamed up data is simultaneously not how the world is and how the model thinks the world is. This contrastive dreaming scheme might improve generalization in evaluators meant to operationalize human ideals of the world, and provide a dense source of edge cases to be prioritized in (human) oversight.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/how-does-contrastive-dreaming-relate-to-concrete-challenges-in-alignment\",\n    \"title\": \"how-does-contrastive-dreaming-relate-to-concrete-challenges-in-alignment\"\n  }, \"[[how-does-contrastive-dreaming-relate-to-concrete-challenges-in-alignment]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/what-are-some-other-applications-of-contrastive-dreaming-besides-objective-robustness\",\n    \"title\": \"what-are-some-other-applications-of-contrastive-dreaming-besides-objective-robustness\"\n  }, \"[[what-are-some-other-applications-of-contrastive-dreaming-besides-objective-robustness]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/how-could-league-training-be-applied-to-contrastive-dreaming\",\n    \"title\": \"how-could-league-training-be-applied-to-contrastive-dreaming\"\n  }, \"[[how-could-league-training-be-applied-to-contrastive-dreaming]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"2c829204-3d93-5141-a958-cf58d1cc1959","fields":{"slug":"/contrastive-dreaming","title":"Contrastive Dreaming"}}}]},"fields":{"slug":"/how-could-league-training-be-applied-to-contrastive-dreaming","title":"How could league training be applied to contrastive dreaming?"}}},"pageContext":{"id":"2782b6ae-5c75-5590-913f-9385b18c9008"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}